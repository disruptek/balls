name: CI
on:
  schedule:
    - cron: '30 5 * * *'

  push:
    branches:
      - main
      - v3
      - v4
      - v5
      - v6

  pull_request:
    branches:
      - '*'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    # Disable the filter on scheduled runs because we don't want to skip those
    if: github.event_name != 'schedule'
    continue-on-error: true # Makes sure errors won't stop us
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.filter.outputs.src }}
    steps:
      # For PRs the path filter check with Github API, so no need to checkout
      # for them.
      - if: github.event_name != 'pull_request'
        name: Checkout (if not PR)
        uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            src:
              - '**.cfg'
              - '**.nims'
              - '**.nim'
              - '**.nimble'
              - 'tests/**'
              - '.github/workflows/ci.yml'

  build:
    # Build if the files we care about are changed.
    needs: changes
    # Make sure to always run regardless of whether the filter success or not.
    # When the filter fails there won't be an output, so checking for `false`
    # state is better than checking for `true`.
    #
    # The always() function here is required for the job to always run despite
    # what Github docs said, see: https://github.com/actions/runner/issues/491
    if: always() && !cancelled() && needs.changes.outputs.src != 'false'

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        compiler:
          - name: nim
            version: devel
          - name: nim
            version: version-2-0
          - name: nimskull
            version: "*"
#            docs: true
    name: "${{ matrix.os }} (${{ matrix.compiler.name }} ${{ matrix.compiler.version }})"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: project

      - name: Compiler (nim)
        if: matrix.compiler.name == 'nim'
        uses: alaviss/setup-nim@0.1.1
        with:
          path: nim
          version: ${{ matrix.compiler.version }}

      - name: Compiler (nimskull)
        id: nimskull
        if: matrix.compiler.name == 'nimskull'
        uses: nim-works/setup-nimskull@0.1.0
        with:
          nimskull-version: ${{ matrix.compiler.version }}

      - name: Fetch Nimble
        if: matrix.compiler.name == 'nimskull'
        uses: actions/checkout@v4
        with:
          path: nimble
          repository: alaviss/nimble
          ref: nimskull

      - name: Build Nimble
        if: matrix.compiler.name == 'nimskull'
        shell: bash
        run: |
          cd nimble
          nim c -d:release -o:nimble src/nimble.nim
          cp nimble "$NIMSKULL_BIN/nimble"
          # Add nimble binary folder to PATH too
          echo "$HOME/.nimble/bin" >> $GITHUB_PATH
        env:
          NIMSKULL_BIN: ${{ steps.nimskull.outputs.bin-path }}

#      - name: Valgrind
#        shell: bash
#        run: |
#          sudo apt-get update
#          sudo apt install --fix-missing valgrind

      - name: Dependencies
        shell: bash
        run: |
          cd project
          nimble --accept develop
          nimble --accept install
        env:
          NIM: ${{ matrix.compiler.name }}

      - name: Tests
        shell: bash
        run: |
          cd project
          if [[ $NIM == "nim" ]]; then
            # test cpp under old nim
            balls --path="." --backend:cpp --backend:e
          fi
          balls --path="." --backend:js --backend:c

          # rm spam from the unittest output examples
          echo "--hint[Link]:off" >> nim.cfg
          echo "--hint[Exec]:off" >> nim.cfg
          echo "--hint[Processing]:off" >> nim.cfg
          echo "--hint[Conf]:off" >> nim.cfg
          echo "--hint[Cc]:off" >> nim.cfg
          echo "--hint[ConvFromXtoItselfNotNeeded]:off" >> nim.cfg
          echo "--hint[SuccessX]:off" >> nim.cfg
          echo "--warning[User]:off" >> nim.cfg
          echo "--warning[Deprecated]:off" >> nim.cfg
          echo "--define:ballsAuditTimeSpace" >> nim.cfg
          echo "--debugger:native" >> nim.cfg
          echo "--stacktrace:on" >> nim.cfg
          echo "--define:useMalloc" >> nim.cfg

      - name: Sample Success
        shell: bash
        run: |
          cd project
          # inspect success example
          nim c --run tests/test.nim

      - name: Sample Failure
        shell: bash
        run: |
          cd project
          # inspect failure example
          nim c examples/fails.nim
          ! examples/fails

      - name: Dry Rebuild
        shell: bash
        run: |
          cd project
          # build a dry version of the runner
          echo "--define:ballsDry" >> nim.cfg
          nim c balls.nim

      - name: Dry Matrix
        shell: bash
        run: |
          cd project
          # inspect matrix
          balls --path="." --backend:js --backend:c

      - name: Dry Success
        shell: bash
        run: |
          cd project
          # inspect unit tests
          nim c --run tests/test.nim

      - name: Dry Failure
        shell: bash
        run: |
          cd project
          # inspect failure examples
          nim c examples/fails.nim
          ! examples/fails

#      - name: Docs
#        if: ${{ matrix.docs }} == 'true'
#        shell: bash
#        run: |
#          cd project
#          branch=${{ github.ref }}
#          branch=${branch##*/}
#          nimble doc --project --path="." --outdir:docs \
#            '--git.url:https://github.com/${{ github.repository }}' \
#            '--git.commit:${{ github.sha }}' \
#            "--git.devel:$branch" \
#            balls.nim
#          # Ignore failures for older Nim
#          cp docs/{the,}index.html || true
#
#      - name: Pages
#        if: >
#          github.event_name == 'push' && github.ref == 'refs/heads/main' &&
#          matrix.os == 'ubuntu-latest' && matrix.docs == 'true'
#        uses: crazy-max/ghaction-github-pages@v1
#        with:
#          build_dir: project/docs
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
